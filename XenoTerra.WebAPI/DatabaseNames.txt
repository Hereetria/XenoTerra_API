DESKTOP-A7AFDHF
LAPTOP-BIS8RAQN

//private Expression<Func<TEntity, TResultWithRelationsDto>> CreateSelectorExpression(IEnumerable<string> selectedFields)
//{
//    var parameter = Expression.Parameter(typeof(TEntity), "entity");
//    var bindings = new List<MemberBinding>();

//    var selectedFieldsSet = new HashSet<string>(selectedFields, StringComparer.OrdinalIgnoreCase);
//    var fieldQueue = new Queue<string>(selectedFieldsSet);

//    var entityType = _context.Model.FindEntityType(typeof(TEntity));

//    while (fieldQueue.Count > 0)
//    {
//        var field = fieldQueue.Dequeue();
//        var dtoProperty = typeof(TResultWithRelationsDto).GetProperties()
//            .FirstOrDefault(p => string.Equals(p.Name, field, StringComparison.OrdinalIgnoreCase));

//        if (dtoProperty == null) continue;

//        ProcessNavigationProperty(dtoProperty, entityType, selectedFieldsSet, fieldQueue);

//        if (dtoProperty != null &&
//            (dtoProperty.PropertyType.IsPrimitive || // int, bool, double vs.
//             dtoProperty.PropertyType == typeof(string) ||
//             dtoProperty.PropertyType == typeof(Guid)))

//        {
//            var entityProperty = Expression.Property(parameter, field);
//            var binding = Expression.Bind(dtoProperty, entityProperty);
//            bindings.Add(binding);
//        }
//    }

//    var body = Expression.MemberInit(Expression.New(typeof(TResultWithRelationsDto)), bindings);
//    return Expression.Lambda<Func<TEntity, TResultWithRelationsDto>>(body, parameter);
//}
